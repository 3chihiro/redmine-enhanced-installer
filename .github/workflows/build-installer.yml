name: Enhanced Redmine Installer CI/CD

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly security scans
    - cron: '0 2 * * 0'

env:
  REDMINE_VERSION: '5.0.5'
  RUBY_VERSION: '3.2.0'

# Set default permissions
permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: write

jobs:
  # Security and code quality checks
  security-scan:
    runs-on: ubuntu-latest
    name: Security & Quality Scan
    permissions:
      contents: read
      security-events: write
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ruby
        config: |
          name: "Enhanced Redmine Analysis"
          disable-default-path-filters: false
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:ruby"

  # Validate configuration files
  validate-config:
    runs-on: ubuntu-latest
    name: Validate Configuration
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ env.RUBY_VERSION }}
        bundler-cache: false
    
    - name: Validate YAML files
      run: |
        find . -name "*.yml" -o -name "*.yaml" | while read file; do
          echo "Validating $file"
          ruby -ryaml -e "
            begin
              YAML.load_file('$file')
              puts '✅ $file - Valid'
            rescue => e
              puts '❌ $file - Error: #{e.message}'
              exit 1
            end
          "
        done
    
    - name: Validate Ruby scripts
      run: |
        find . -name "*.rb" | while read file; do
          echo "Validating Ruby file: $file"
          ruby -c "$file" || exit 1
        done
    
    - name: Test Excel configuration
      run: |
        ruby -ryaml -e "
          begin
            config = YAML.load_file('config/excel-config.yml')
            puts '✅ Excel config loaded successfully'
            puts \"Environments: #{config.keys.join(', ')}\"
          rescue => e
            puts '❌ Excel config error: #{e.message}'
            exit 1
          end
        "

  # Test installer components (lightweight for WiX/Ruby project)
  test-components:
    runs-on: ubuntu-latest
    name: Test Components
    needs: [validate-config]
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ env.RUBY_VERSION }}
        bundler-cache: false
    
    - name: Test Ruby script syntax
      run: |
        echo "Testing Ruby scripts syntax..."
        find . -name "*.rb" -type f | while read file; do
          echo "Checking $file"
          ruby -c "$file"
          if [ $? -eq 0 ]; then
            echo "✅ $file - Syntax OK"
          else
            echo "❌ $file - Syntax Error"
            exit 1
          fi
        done
        echo "✅ All Ruby scripts passed syntax validation"
    
    - name: Test project structure
      run: |
        echo "Validating project structure..."
        
        # Check required directories
        required_dirs=("src/wix" "src/scripts" "config" "templates" ".vscode" ".github/workflows")
        for dir in "${required_dirs[@]}"; do
          if [ -d "$dir" ]; then
            echo "✅ Directory exists: $dir"
          else
            echo "❌ Missing directory: $dir"
            exit 1
          fi
        done
        
        # Check required files
        required_files=("src/wix/Product.wxs" "config/excel-config.yml" "README.md" ".gitignore")
        for file in "${required_files[@]}"; do
          if [ -f "$file" ]; then
            echo "✅ File exists: $file"
          else
            echo "❌ Missing file: $file"
            exit 1
          fi
        done
        
        echo "✅ Project structure validation passed"
    
    - name: Test Excel templates
      run: |
        echo "Checking Excel templates..."
        template_count=$(find templates/ -name "*.xlsx" -type f | wc -l)
        echo "Found $template_count Excel template files"
        
        if [ "$template_count" -ge 3 ]; then
          echo "✅ Sufficient Excel templates found ($template_count)"
        else
          echo "⚠️ Limited Excel templates ($template_count), but continuing..."
        fi
        
        # List template files
        find templates/ -name "*.xlsx" -type f | while read file; do
          echo "📄 Template: $file"
        done
    
    - name: Test basic Excel functionality (without heavy gems)
      run: |
        # Create a minimal test without requiring heavy Excel gems
        ruby -e "
        puts '🧪 Testing basic Ruby Excel functionality...'
        
        # Test YAML loading (Excel config)
        require 'yaml'
        begin
          config = YAML.load_file('config/excel-config.yml')
          puts '✅ Excel configuration YAML loaded successfully'
          puts \"   Environments: #{config.keys.join(', ')}\"
        rescue => e
          puts '❌ Excel config YAML error: #{e.message}'
          exit 1
        end
        
        # Test basic file operations
        test_csv = 'test_data.csv'
        File.write(test_csv, \"ID,Subject,Status\\n1,Test Issue,New\\n\")
        
        if File.exist?(test_csv) && File.size(test_csv) > 0
          puts '✅ Basic file export functionality works'
          File.delete(test_csv)
        else
          puts '❌ File operations failed'
          exit 1
        end
        
        puts '✅ Basic Excel functionality test: PASSED'
        "
    
    - name: Test Windows batch scripts validation
      run: |
        echo "Validating Windows batch scripts..."
        find src/scripts -name "*.bat" -type f | while read file; do
          echo "Checking $file"
          
          # Basic validation - check for common issues
          if grep -q "echo off" "$file"; then
            echo "✅ $file - Has proper echo off"
          else
            echo "⚠️ $file - Missing echo off (but continuing)"
          fi
          
          # Check for basic structure
          if [ -s "$file" ]; then
            echo "✅ $file - File is not empty"
          else
            echo "❌ $file - File is empty"
            exit 1
          fi
        done
        
        echo "✅ Windows batch scripts validation completed"

  # Build Windows installer (simplified version)
  build-windows:
    runs-on: windows-2019  # より安定したWindows-2019に変更
    name: Build Windows Installer (Final Fix)
    needs: [security-scan, test-components]
    if: github.event_name == 'push' || github.event_name == 'release'
    permissions:
      contents: read
      actions: write
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2
    
    - name: Force Clean WiX Environment
      run: |
        Write-Host "🔥 FORCE CLEANING WiX Environment"
        
        # 既存のWiXインストールをすべて削除
        $wixPaths = @(
          "${env:ProgramFiles(x86)}\WiX Toolset v3.11",
          "C:\WiX",
          "C:\tools\wix",
          "C:\WiX311"
        )
        
        foreach ($path in $wixPaths) {
          if (Test-Path $path) {
            Write-Host "Removing existing WiX at: $path"
            Remove-Item $path -Recurse -Force -ErrorAction SilentlyContinue
          }
        }
        
        # PATH から WiX エントリを削除
        $cleanPath = ($env:PATH -split ';' | Where-Object { $_ -notlike "*wix*" -and $_ -notlike "*WiX*" }) -join ';'
        $env:PATH = $cleanPath
        
        Write-Host "✅ WiX environment completely cleaned"
      shell: powershell
    
    - name: Install WiX Toolset (Bulletproof Method)
      run: |
        Write-Host "🔧 Installing WiX Toolset with BULLETPROOF method"
        
        # Method 1: 直接実行可能バイナリダウンロード
        $wixBinUrl = "https://github.com/wixtoolset/wix3/releases/download/wix3112rtm/wix311-binaries.zip"
        $wixZip = "$env:TEMP\wix311-binaries.zip"
        $wixDir = "C:\WiX311"
        
        try {
          Write-Host "Downloading WiX binaries..."
          Invoke-WebRequest -Uri $wixBinUrl -OutFile $wixZip -UseBasicParsing
          
          Write-Host "Extracting WiX binaries..."
          New-Item -ItemType Directory -Force -Path $wixDir
          Expand-Archive -Path $wixZip -DestinationPath $wixDir -Force
          
          # PATH に追加
          $env:PATH = "$wixDir;$env:PATH"
          echo "$wixDir" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          
          Write-Host "✅ WiX Toolset installed successfully"
          
          # 即座に検証
          $candleTest = & "$wixDir\candle.exe" -? 2>&1
          if ($LASTEXITCODE -eq 0 -or $candleTest -like "*Windows Installer XML*") {
            Write-Host "✅ candle.exe working correctly"
          } else {
            throw "candle.exe verification failed"
          }
          
          $lightTest = & "$wixDir\light.exe" -? 2>&1  
          if ($LASTEXITCODE -eq 0 -or $lightTest -like "*Windows Installer XML*") {
            Write-Host "✅ light.exe working correctly"
          } else {
            throw "light.exe verification failed"
          }
          
        } catch {
          Write-Host "❌ Primary WiX installation failed: $($_.Exception.Message)"
          
          # Method 2: Chocolatey フォールバック
          Write-Host "Trying Chocolatey fallback..."
          try {
            Set-ExecutionPolicy Bypass -Scope Process -Force
            [System.Net.ServicePointManager]::SecurityProtocol = 3072
            iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
            
            choco install wixtoolset -y --force
            $env:PATH = "${env:ProgramFiles(x86)}\WiX Toolset v3.11\bin;$env:PATH"
            echo "${env:ProgramFiles(x86)}\WiX Toolset v3.11\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
            
            Write-Host "✅ WiX installed via Chocolatey"
          } catch {
            Write-Host "❌ All WiX installation methods failed"
            exit 1
          }
        }
      shell: powershell
    
    - name: Verify WiX Installation (Comprehensive)
      run: |
        Write-Host "🔍 Comprehensive WiX verification"
        
        # PATH確認
        Write-Host "Current PATH entries with 'wix':"
        $env:PATH -split ';' | Where-Object { $_ -like "*wix*" -or $_ -like "*WiX*" } | ForEach-Object {
          Write-Host "  - $_"
          if (Test-Path $_) {
            Get-ChildItem $_ -Filter "*.exe" | ForEach-Object { Write-Host "    → $($_.Name)" }
          }
        }
        
        # candle.exe の詳細確認
        $candleLocations = @(
          "candle.exe",
          "C:\Program Files (x86)\WiX Toolset v3.11\bin\candle.exe",
          "C:\WiX\candle.exe",
          "C:\tools\wix\bin\candle.exe"
        )
        
        $candleFound = $false
        foreach ($location in $candleLocations) {
          try {
            $candleResult = & $location -? 2>&1
            if ($LASTEXITCODE -eq 0 -or $candleResult -like "*Windows Installer XML*") {
              Write-Host "✅ candle.exe working at: $location"
              $candleFound = $true
              break
            }
          } catch {
            Write-Host "❌ candle.exe failed at: $location"
          }
        }
        
        if (-not $candleFound) {
          Write-Host "🚨 CRITICAL: No working candle.exe found"
          exit 1
        }
        
        # light.exe の詳細確認
        $lightLocations = @(
          "light.exe",
          "C:\Program Files (x86)\WiX Toolset v3.11\bin\light.exe",
          "C:\WiX\light.exe",
          "C:\tools\wix\bin\light.exe"
        )
        
        $lightFound = $false
        foreach ($location in $lightLocations) {
          try {
            $lightResult = & $location -? 2>&1
            if ($LASTEXITCODE -eq 0 -or $lightResult -like "*Windows Installer XML*") {
              Write-Host "✅ light.exe working at: $location"
              $lightFound = $true
              break
            }
          } catch {
            Write-Host "❌ light.exe failed at: $location"
          }
        }
        
        if (-not $lightFound) {
          Write-Host "🚨 CRITICAL: No working light.exe found"
          exit 1
        }
      shell: powershell
    
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ env.RUBY_VERSION }}
    
    - name: Create build directories
      run: |
        Write-Host "🔨 Creating build directory structure with pre-validation..."
        New-Item -ItemType Directory -Force -Path build
        
        # Pre-build validation: Check all critical files exist
        Write-Host "🔍 Pre-build validation: Checking critical files..."
        $criticalFiles = @(
          "src/assets/redmine-icon.ico",
          "src/wix/Product.wxs",
          "src/scripts/start-redmine.bat",
          "src/scripts/install-plugins.bat", 
          "src/scripts/configure-excel.bat",
          "src/scripts/customize-redmine.rb",
          "config/excel-config.yml",
          "templates/gantt-template.xlsx",
          "templates/excel/gantt-template.xlsx",
          "templates/excel/evm-template.xlsx",
          "templates/excel/report-template.xlsx",
          "templates/excel/issue-export-template.xlsx",
          "LICENSE.rtf"
        )
        
        $missingFiles = @()
        foreach ($file in $criticalFiles) {
          if (Test-Path $file) {
            $size = (Get-Item $file).Length
            Write-Host "✅ $file ($size bytes)"
          } else {
            Write-Host "❌ MISSING: $file"
            $missingFiles += $file
          }
        }
        
        if ($missingFiles.Count -gt 0) {
          Write-Host "🚨 CRITICAL ERROR: $($missingFiles.Count) files missing!"
          Write-Host "Missing files:"
          foreach ($file in $missingFiles) {
            Write-Host "  - $file"
          }
          Write-Host "Build cannot proceed without these files."
          exit 1
        }
        
        Write-Host "🎉 All $($criticalFiles.Count) critical files validated successfully!"
        
        # Copy with enhanced error handling and debugging
        Write-Host "📁 Copying files to build directory..."
        Write-Host "Current working directory: $(Get-Location)"
        Write-Host "Build directory exists: $(Test-Path 'build')"
        
        try {
          # Use robocopy for more reliable directory copying on Windows
          Write-Host "Using robocopy for reliable file copying..."
          
          Write-Host "Copying src directory..."
          if (Test-Path "src") {
            $result = robocopy "src" "build\src" /E /NFL /NDL /NJH /NJS /nc /ns /np
            if ($LASTEXITCODE -le 1) { # robocopy success codes are 0 or 1
              Write-Host "✅ src directory copied successfully"
            } else {
              throw "robocopy failed for src directory with exit code $LASTEXITCODE"
            }
          } else {
            throw "Source 'src' directory not found"
          }
          
          Write-Host "Copying config directory..."
          if (Test-Path "config") {
            $result = robocopy "config" "build\config" /E /NFL /NDL /NJH /NJS /nc /ns /np
            if ($LASTEXITCODE -le 1) {
              Write-Host "✅ config directory copied successfully"
            } else {
              throw "robocopy failed for config directory with exit code $LASTEXITCODE"
            }
          } else {
            throw "Source 'config' directory not found"
          }
          
          Write-Host "Copying templates directory..."
          if (Test-Path "templates") {
            $result = robocopy "templates" "build\templates" /E /NFL /NDL /NJH /NJS /nc /ns /np
            if ($LASTEXITCODE -le 1) {
              Write-Host "✅ templates directory copied successfully"
            } else {
              throw "robocopy failed for templates directory with exit code $LASTEXITCODE"
            }
          } else {
            throw "Source 'templates' directory not found"
          }
          
          Write-Host "Copying LICENSE.rtf..."
          if (Test-Path "LICENSE.rtf") {
            Copy-Item "LICENSE.rtf" "build\LICENSE.rtf" -Force -ErrorAction Stop
            Write-Host "✅ LICENSE.rtf copied successfully"
          } else {
            throw "LICENSE.rtf file not found"
          }
          
          Write-Host "✅ All files copied successfully using robocopy"
        } catch {
          Write-Host "❌ File copy failed: $($_.Exception.Message)"
          Write-Host "❌ Error details: $($_.Exception.GetType().Name)"
          Write-Host "❌ Last exit code: $LASTEXITCODE"
          Write-Host "❌ Current directory contents:"
          Get-ChildItem -Force | ForEach-Object { Write-Host "  $($_.Name) ($($_.Mode))" }
          Write-Host "❌ Build directory contents:"
          if (Test-Path "build") {
            Get-ChildItem "build" -Recurse -Force | ForEach-Object { Write-Host "  $($_.FullName)" }
          } else {
            Write-Host "  Build directory does not exist"
          }
          exit 1
        }
        
        Write-Host "📋 Verifying ALL critical files:"
        $criticalFiles = @(
          "build/src/assets/redmine-icon.ico",
          "build/src/wix/Product.wxs", 
          "build/src/scripts/start-redmine.bat",
          "build/src/scripts/install-plugins.bat", 
          "build/src/scripts/configure-excel.bat",
          "build/src/scripts/customize-redmine.rb",
          "build/config/excel-config.yml",
          "build/templates/gantt-template.xlsx",
          "build/templates/excel/gantt-template.xlsx",
          "build/templates/excel/evm-template.xlsx",
          "build/templates/excel/report-template.xlsx",
          "build/templates/excel/issue-export-template.xlsx",
          "build/LICENSE.rtf"
        )
        
        $missing = @()
        foreach ($file in $criticalFiles) {
          if (Test-Path $file) {
            $size = (Get-Item $file).Length
            Write-Host "✅ $file ($size bytes)"
          } else {
            Write-Host "❌ MISSING: $file"
            $missing += $file
          }
        }
        
        if ($missing.Count -gt 0) {
          Write-Host "🚨 CRITICAL: $($missing.Count) files missing!"
          Write-Host "Missing files: $($missing -join ', ')"
          exit 1
        }
        
        Write-Host "🎉 All $($criticalFiles.Count) critical files verified!"
      shell: powershell
    
    - name: Validate WiX source files
      run: |
        Get-ChildItem -Path "src/wix" -Filter "*.wxs" | ForEach-Object {
          Write-Host "Validating $($_.Name)..."
          $content = Get-Content $_.FullName -Raw
          if ($content -match '<\?xml.*\?>') {
            Write-Host "✅ $($_.Name) appears to be valid XML"
          } else {
            Write-Host "❌ $($_.Name) may have XML issues"
          }
        }
      shell: powershell
    
    - name: Absolute Minimal WiX Test
      run: |
        cd build
        Write-Host "🧪 ABSOLUTE MINIMAL WiX TEST"

        # 超シンプルなWiXファイル作成（ファイル参照なし）
        @'
        <?xml version="1.0" encoding="UTF-8"?>
        <Wix xmlns="http://schemas.microsoft.com/wix/2006/wi">
          <Product Id="11111111-2222-3333-4444-555555555555" 
                   Name="Test" 
                   Language="1033" 
                   Version="1.0.0.0" 
                   Manufacturer="Test">
            
            <Package InstallerVersion="200" Compressed="yes" InstallScope="perMachine" />

            <Directory Id="TARGETDIR" Name="SourceDir">
              <Directory Id="ProgramFilesFolder">
                <Directory Id="INSTALLFOLDER" Name="Test">
                  <Component Id="TestComp" Guid="66666666-7777-8888-9999-AAAAAAAAAAAA">
                    <CreateFolder/>
                    <RemoveFolder Id="RemoveFolder" On="uninstall"/>
                    <RegistryValue Root="HKCU" Key="Software\Test" 
                                  Name="installed" Type="integer" Value="1" KeyPath="yes"/>
                  </Component>
                </Directory>
              </Directory>
            </Directory>

            <Feature Id="TestFeature" Title="Test" Level="1">
              <ComponentRef Id="TestComp" />
            </Feature>

            <MediaTemplate EmbedCab="yes" />
          </Product>
        </Wix>
        '@ | Out-File -FilePath "AbsoluteTest.wxs" -Encoding UTF8

        # 絶対確実ビルド
        Write-Host "Building absolute minimal test..."

        try {
          # candle.exe 実行
          Write-Host "Running candle.exe..."
          $candleArgs = @("-nologo", "-v", "AbsoluteTest.wxs", "-out", "AbsoluteTest.wixobj")
          Write-Host "Command: candle.exe $($candleArgs -join ' ')"
          
          $candleOutput = & candle.exe @candleArgs 2>&1
          Write-Host "candle.exe output:"
          $candleOutput | ForEach-Object { Write-Host "  $_" }
          
          if ($LASTEXITCODE -ne 0) {
            Write-Host "❌ candle.exe failed with exit code: $LASTEXITCODE"
            Write-Host "❌ This indicates WiX environment is fundamentally broken"
            
            # 詳細診断
            Write-Host "🔍 DETAILED DIAGNOSTICS:"
            Write-Host "Working directory: $(Get-Location)"
            Write-Host "candle.exe location: $(Get-Command candle.exe -ErrorAction SilentlyContinue).Source"
            Write-Host "PATH: $env:PATH"
            Write-Host "AbsoluteTest.wxs exists: $(Test-Path 'AbsoluteTest.wxs')"
            
            if (Test-Path 'AbsoluteTest.wxs') {
              Write-Host "AbsoluteTest.wxs content:"
              Get-Content 'AbsoluteTest.wxs' | ForEach-Object { Write-Host "  $_" }
            }
            
            exit 1
          }
          
          Write-Host "✅ candle.exe succeeded!"
          
          # light.exe 実行
          Write-Host "Running light.exe..."
          $lightArgs = @("-nologo", "-v", "AbsoluteTest.wixobj", "-out", "AbsoluteTest.msi")
          Write-Host "Command: light.exe $($lightArgs -join ' ')"
          
          $lightOutput = & light.exe @lightArgs 2>&1
          Write-Host "light.exe output:"
          $lightOutput | ForEach-Object { Write-Host "  $_" }
          
          if ($LASTEXITCODE -ne 0) {
            Write-Host "❌ light.exe failed with exit code: $LASTEXITCODE"
            exit 1
          }
          
          # 成功検証
          if (Test-Path "AbsoluteTest.msi") {
            $msi = Get-Item "AbsoluteTest.msi"
            $sizeKB = [math]::Round($msi.Length / 1KB, 1)
            Write-Host "🎉 BREAKTHROUGH: MSI created successfully!"
            Write-Host "📄 File: $($msi.Name)"
            Write-Host "📊 Size: $sizeKB KB"
            Write-Host "✅ WiX environment is working!"
            
          } else {
            Write-Host "❌ MSI not found despite successful light.exe"
            exit 1
          }
          
        } catch {
          Write-Host "❌ Absolute minimal test exception: $($_.Exception.Message)"
          Write-Host "❌ Exception type: $($_.Exception.GetType().Name)"
          exit 1
        }
      shell: powershell
    
    - name: Progressive Build Implementation
      run: |
        Write-Host "🔄 PHASE 3: Progressive Build Implementation"
        
        # Step 1: UltraMinimal.wxs ビルド
        Write-Host "Step 1: Building UltraMinimal.wxs..."
        
        # Copy UltraMinimal.wxs from source
        Write-Host "Copying UltraMinimal.wxs from src/wix/"
        Copy-Item "..\src\wix\UltraMinimal.wxs" -Destination "UltraMinimal.wxs" -Force
        
        try {
          Write-Host "Building UltraMinimal installer..."
          
          # candle.exe for UltraMinimal
          Write-Host "Running candle.exe on UltraMinimal.wxs..."
          $candleOutput = & candle.exe -nologo -v "UltraMinimal.wxs" -out "UltraMinimal.wixobj" 2>&1
          Write-Host "candle.exe output:"
          $candleOutput | ForEach-Object { Write-Host "  $_" }
          
          if ($LASTEXITCODE -ne 0) {
            Write-Host "❌ UltraMinimal candle.exe failed with exit code: $LASTEXITCODE"
            exit 1
          }
          
          Write-Host "✅ UltraMinimal candle.exe succeeded!"
          
          # light.exe for UltraMinimal
          Write-Host "Running light.exe on UltraMinimal.wixobj..."
          $lightOutput = & light.exe -nologo -v "UltraMinimal.wixobj" -out "UltraMinimal.msi" 2>&1
          Write-Host "light.exe output:"
          $lightOutput | ForEach-Object { Write-Host "  $_" }
          
          if ($LASTEXITCODE -ne 0) {
            Write-Host "❌ UltraMinimal light.exe failed with exit code: $LASTEXITCODE"
            exit 1
          }
          
          # Verify UltraMinimal MSI
          if (Test-Path "UltraMinimal.msi") {
            $msi = Get-Item "UltraMinimal.msi"
            $sizeKB = [math]::Round($msi.Length / 1KB, 1)
            Write-Host "🎉 UltraMinimal MSI created successfully!"
            Write-Host "📄 File: $($msi.Name)"
            Write-Host "📊 Size: $sizeKB KB"
            Write-Host "✅ Enhanced Redmine minimal installer working!"
          } else {
            Write-Host "❌ UltraMinimal MSI not found despite successful light.exe"
            exit 1
          }
          
        } catch {
          Write-Host "❌ UltraMinimal build exception: $($_.Exception.Message)"
          exit 1
        }
      shell: powershell
    
    # Docker内ビルド（終極手段）
    - name: Docker Build Ultimate Solution
      if: failure() # 他の方法が失敗した場合のみ実行
      run: |
        Write-Host "🐳 PHASE 4: Docker Build Ultimate Solution"
        
        # Windows Docker container でのビルド
        try {
          docker run --rm -v "${PWD}:C:\workspace" mcr.microsoft.com/windows:ltsc2022 powershell -Command "
            Set-Location C:\workspace;
            Write-Host 'Container build environment';
            
            # WiXインストール in container
            Invoke-WebRequest -Uri 'https://github.com/wixtoolset/wix3/releases/download/wix3112rtm/wix311.exe' -OutFile 'wix311.exe';
            Start-Process -FilePath 'wix311.exe' -ArgumentList '/quiet' -Wait;
            
            # パス設定
            $env:PATH = 'C:\Program Files (x86)\WiX Toolset v3.11\bin;' + $env:PATH;
            
            # ビルド実行
            & candle.exe -nologo UltraMinimal.wxs -out UltraMinimal.wixobj;
            & light.exe -nologo UltraMinimal.wixobj -out ContainerBuild.msi;
            
            if (Test-Path 'ContainerBuild.msi') {
              Write-Host 'Container build SUCCESS';
            } else {
              Write-Host 'Container build FAILED';
              exit 1;
            }
          "
          
          Write-Host "✅ Docker build completed successfully"
        } catch {
          Write-Host "❌ Docker build failed: $($_.Exception.Message)"
        }
      shell: powershell
    
    - name: Generate build artifacts info
      run: |
        echo "Build completed at $(Get-Date)" | Out-File -FilePath "build/build-info.txt"
        echo "Repository: ${{ github.repository }}" | Out-File -FilePath "build/build-info.txt" -Append
        echo "Commit: ${{ github.sha }}" | Out-File -FilePath "build/build-info.txt" -Append
        echo "Ref: ${{ github.ref }}" | Out-File -FilePath "build/build-info.txt" -Append
      shell: powershell
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: enhanced-redmine-installer-windows
        path: |
          build/*.msi
          build/build-info.txt
          build/components/
        retention-days: 30

  # Create Docker image for testing
  build-docker:
    runs-on: ubuntu-latest
    name: Build Docker Test Image
    needs: [test-components]
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Create Dockerfile
      run: |
        cat > Dockerfile << 'EOF'
        FROM bitnami/redmine:${{ env.REDMINE_VERSION }}
        
        # Install additional dependencies
        USER root
        RUN apt-get update && apt-get install -y \
            build-essential \
            libxml2-dev \
            libxslt1-dev \
            && rm -rf /var/lib/apt/lists/*
        
        # Copy enhanced configuration
        COPY config/excel-config.yml /opt/bitnami/redmine/config/
        COPY src/scripts/customize-redmine.rb /opt/bitnami/redmine/
        COPY templates/ /opt/bitnami/redmine/templates/
        
        USER 1001
        WORKDIR /opt/bitnami/redmine
        
        EXPOSE 3000
        
        CMD ["bundle", "exec", "rails", "server", "-b", "0.0.0.0"]
        EOF
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: |
          enhanced-redmine-test:latest
          enhanced-redmine-test:${{ env.REDMINE_VERSION }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Integration tests
  integration-tests:
    runs-on: ubuntu-latest
    name: Integration Tests
    needs: [build-docker]
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: testpassword
          MYSQL_DATABASE: redmine_test
          MYSQL_USER: redmine
          MYSQL_PASSWORD: redmine
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Test configuration loading
      run: |
        echo "Testing configuration files..."
        if [ -f "config/excel-config.yml" ]; then
          echo "✅ Excel config exists"
        else
          echo "❌ Excel config missing"
          exit 1
        fi
        
        if [ -f "src/scripts/customize-redmine.rb" ]; then
          echo "✅ Customization script exists"
        else
          echo "❌ Customization script missing"
          exit 1
        fi
    
    - name: Test templates
      run: |
        echo "Testing template files..."
        template_count=$(find templates/ -name "*.xlsx" | wc -l)
        echo "Found $template_count Excel templates"
        
        if [ "$template_count" -ge 3 ]; then
          echo "✅ Sufficient templates found"
        else
          echo "⚠️ Limited templates found, but continuing..."
        fi

  # Create release
  create-release:
    runs-on: ubuntu-latest
    name: Create Release
    needs: [build-windows, integration-tests]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Download Windows installer
      uses: actions/download-artifact@v4
      with:
        name: enhanced-redmine-installer-windows
        path: ./release-assets
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        name: Enhanced Redmine Installer ${{ github.ref_name }}
        body: |
          # Enhanced Redmine Installer ${{ github.ref_name }}
          
          ## 🚀 Features
          - Bitnami Redmine ${{ env.REDMINE_VERSION }} with enhanced plugins
          - Advanced Gantt charts with dependencies and baselines  
          - Professional Excel export/import with custom templates
          - Earned Value Management (EVM) tracking and reporting
          - Advanced reporting dashboards and analytics
          
          ## 📦 Installation
          1. Download the installer for your platform
          2. Run as Administrator (Windows)
          3. Follow the installation wizard
          4. Access Redmine at http://localhost:3000
          
          ## 🔐 Security
          - All components scanned for vulnerabilities
          - Code quality validated with CodeQL
          - Automated security testing
          
          ## 📋 System Requirements
          - Windows 10/11 or Windows Server 2016+
          - .NET Framework 4.8+
          - 4GB RAM minimum, 8GB recommended
          - 5GB disk space
          
          ## ✨ What's New
          See [README.md](README.md) for detailed changes and features.
        files: |
          release-assets/*
        draft: false
        prerelease: ${{ contains(github.ref_name, '-') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Notification
  notify:
    runs-on: ubuntu-latest
    name: Build Notification
    needs: [create-release, integration-tests]
    if: always()
    
    steps:
    - name: Build Status Summary
      run: |
        if [ "${{ needs.create-release.result }}" == "success" ] || [ "${{ needs.integration-tests.result }}" == "success" ]; then
          echo "✅ Enhanced Redmine build completed successfully!"
          echo "🚀 Ready for deployment and distribution"
        else
          echo "⚠️ Build completed with some issues"
          echo "📋 Check individual job results for details"
        fi